---
  
- name: (main) Load in Oracle Environment Variables when Filename Supplied
  include_vars:
     file: "{{ oracle_vars }}"
  when: oracle_vars is defined

- name: (main) Load in Configuration Variables (these Provide Dependencies Bucket location)
  include_vars:
     file: "{{ config_vars }}"

- name: (main) Report Patch ID
  debug:
     msg:  Patch ID                  {{ install_patch_id }}
  when: install_patch_id is defined

- name: (main) Get Dependencies Bucket
  set_fact:
      dependencies_bucket_name: "{{ dependencies_bucket.name }}"

- name: (main) Display Runtime Information
  debug:
      msg: |
           Environment Name          {{ environment_name }}
           Target Host               {{ target_host }}
           Install Absent Patches    {{ install_absent_patches }}
           Oracle Home               {{ oracle_database_oracle_home }}
           Grid Home                 {{ oracle_grid_oracle_home }}
           Patch Directory           {{ oracle_patch_installer_directory }}
           Dependencies Bucket       {{ dependencies_bucket_name }}

- name: Fail if Specific Patch ID Requested but Not Defined
  fail: 
     msg: "Definition of Patch {{ install_patch_id }} must be configured in the Environments Repository"
  when: install_patch_id is defined and required_patches[install_patch_id] is not defined

- name: (main) Setup Initial Dictionary of Patch Information
  block:

  # Dictionary Key is p<patchno>.  The leading p corresponds to
  # usage by Oracle in patch naming and avoids ansible problems handling
  # number/string conversion by forcing use of strings only for patch IDs.
  - name: (main) Show Starting Dictionary
    debug: var=required_patches

  - name: (main) Add Supplementary Patch Attributes with Default Values
    set_fact:
            tmp_patch: >
                      {{ {item.key:
                             {'filename':item.value.filename,
                              'patch_number':item.key.split("p")[1],
                              'description':item.value.description,
                              'postinstall':item.value.postinstall_sql | default('none'),
                              'grid_patch':item.value.grid_patch,
                              'database_patch':item.value.database_patch,
                              'install_request': false,
                              'already_applied_to_grid': true,
                              'already_applied_to_database': true,
                              'shutdown_required': true}} 
                       }}
    with_dict: "{{ required_patches }}"
    register: tmp_patches

  - name: (main) Create New Patch Dictionary
    set_fact:
            required_patches: "{{ required_patches | combine(item) }}"
    with_items: "{{ tmp_patches.results | map(attribute='ansible_facts.tmp_patch') | list }}"

  when: required_patches is defined

# We run this block to identify and install any absent patches when there is a list of required patches
# for this environment and we have specified install_absent_patches
- name: (main) Installation Block when Required Patches are Defined and Install Required
  block:

   - name: (main) Prepare Patch Information
     include: build-patching-requirements.yml

   - name: (main) Start Blackout on Patching Targets to be Shutdown
     include_tasks: manage-blackout.yml
     vars:
        blackout_action: start
     when: grid_shutdown_needed or database_shutdown_needed

   - name: (main) Shutdown Databases
     include_tasks: shutdown-databases.yml
     when: database_shutdown_needed

   - name: (main) Shutdown Grid
     include_tasks: shutdown-grid.yml
     when: grid_shutdown_needed

   - name: (main) Install Patches
     include_tasks: install-patches.yml
     vars:
        patch_number: "{{ item.value.patch_number }}"
        apply_to_database: "{{ item.value.database_patch and not item.value.already_applied_to_database }}"
        apply_to_grid: "{{ item.value.grid_patch and not item.value.already_applied_to_grid }}"
     with_dict: "{{ required_patches }}"
     when: item.value.install_request and ((item.value.grid_patch and not item.value.already_applied_to_grid) or (item.value.database_patch and not item.value.already_applied_to_database))

   - name: (main) Restart Grid
     include_tasks: restart-grid.yml
     when: grid_shutdown_needed

   - name: (main) Restart Databases
     include_tasks: restart-databases.yml
     when: database_shutdown_needed     

   - name: (main) Apply Post Install SQL for Patch
     include_tasks: run-postinstall.yml
     vars:
        patch_number: "{{ item.value.patch_number }}"
        postinstall_sql: "{{ item.value.postinstall }}"
     with_dict: "{{ required_patches }}"
     when: item.value.install_request and item.value.database_patch and not item.value.already_applied_to_database and item.value.postinstall != 'none'

   - name: (main) Stop Blackout on Patching Targets
     include_tasks: manage-blackout.yml
     vars:
        blackout_action: stop
     when: grid_shutdown_needed or database_shutdown_needed

  when: required_patches is defined and (install_absent_patches | bool | default(false))

# We run this block if there is a list of require patches and fail if any are absent
# NB: This runs both when install_absent_patches is not true (reporting mode only)
#     and also if install_absent_patches is true (confirmation of any installations performed)
- name: (main) Reporting Block when Required Patches
  block:

    - name: (main) Update OPatch Inventory
      include_tasks: query-opatch.yml

    - name: (main) Find if Any Requested Patches Remain Uninstalled
      include_tasks: check-installed.yml
      vars:
              patch_id: "{{item.key}}"
              patch_number: "{{item.value.patch_number}}"
              grid_patch: "{{item.value.grid_patch}}"
              database_patch: "{{item.value.database_patch}}"
      with_dict: "{{ required_patches }}"

    - name: (main) Initialise List of Missing Grid Patches
      set_fact:
            missing_grid_patches: []

    - name: Show the Required Patches
      debug: var=required_patches

    - name: (main) Populate List of Missing Grid Patches
      set_fact:
            missing_grid_patches: "{{ missing_grid_patches + [item.key] }}"
      with_dict: "{{ required_patches }}"
      when:  "item.value.grid_patch and not item.value.already_applied_to_grid"

    - name: (main) Fail if any Grid Patches are absent and we have not specified a specific patch number
      fail:
          msg: "The following Grid patches were required but not installed: {{ missing_grid_patches }}"
      when: ((install_patch_id is not defined) and (missing_grid_patches | length > 0)) or ((install_patch_id is defined) and (required_patches[install_patch_id].grid_patch) and (install_patch_id in missing_grid_patches))

    - name: (main) Initialise List of Missing Database Patches
      set_fact:
          missing_database_patches: []

    - name: (main) Populate List of Missing Database Patches
      set_fact:
          missing_database_patches: "{{ missing_database_patches + [item.key] }}"
      with_dict: "{{ required_patches }}"
      when:  "item.value.database_patch and not item.value.already_applied_to_database"

    - name: (main) Fail if any Database Patches are absent and we have not specified a specific patch number
      fail:
        msg: "The following Database patches were required but not installed: {{ missing_database_patches }}"
      when: ((install_patch_id is not defined) and (missing_database_patches | length > 0)) or ((install_patch_id is defined) and (required_patches[install_patch_id].database_patch) and (install_patch_id in missing_database_patches))


  when: required_patches is defined



  
